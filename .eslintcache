[{"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js":"1","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js":"2","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js":"3","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js":"4","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js":"5","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js":"6","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js":"7","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js":"8","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js":"9","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js":"10","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js":"11","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js":"12"},{"size":381,"mtime":1609120069419,"results":"13","hashOfConfig":"14"},{"size":0,"mtime":1608604050967,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1608620867185,"results":"16","hashOfConfig":"14"},{"size":5700,"mtime":1609146314570,"results":"17","hashOfConfig":"14"},{"size":362,"mtime":1606617756002,"results":"18","hashOfConfig":"14"},{"size":1138,"mtime":1608625959223,"results":"19","hashOfConfig":"14"},{"size":9869,"mtime":1608761823587,"results":"20","hashOfConfig":"14"},{"size":10700,"mtime":1609144919547,"results":"21","hashOfConfig":"14"},{"size":10110,"mtime":1609127490478,"results":"22","hashOfConfig":"14"},{"size":890,"mtime":1609136799201,"results":"23","hashOfConfig":"14"},{"size":1134,"mtime":1609136729670,"results":"24","hashOfConfig":"14"},{"size":875,"mtime":1609146228857,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"odkh2z",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js",["51"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js",["52","53","54","55"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js",["56","57","58","59"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js",["60"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js",["61","62","63","64","65","66","67","68","69","70"],"class Node {\r\n    constructor(tile) {\r\n        this.placement = null;\r\n        this.tiles = [tile]\r\n        this.yields = {\r\n\r\n        }\r\n        this.canBuild = true\r\n    }\r\n    // toString() {\r\n    //     return `[${this.tiles}]`\r\n    // }\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.adjList = new Map() // adjacency list, keys = vertex, values hold an array of adjacent node\r\n    }\r\n    addVertex(v) {\r\n        this.adjList.set(v, [])\r\n    }\r\n    addEdge(v, w) {\r\n        // grabs the vertex and passes it to the array value\r\n        // then vice versa\r\n        if (this.adjList.get(v).includes(w) && this.adjList.get(w).includes(v)) {\r\n            return\r\n        } else {\r\n            this.adjList.get(v).push(w)\r\n            this.adjList.get(w).push(v)\r\n        }\r\n    }\r\n    printGraph() {\r\n        var getKeys = this.adjList.keys();\r\n\r\n        for (var i of getKeys) {\r\n            var getValues = this.adjList.get(i)\r\n            var conc = \"\"\r\n\r\n            for (var j of getValues) {\r\n                conc += j + \" \"\r\n            }\r\n            console.log(i + \" ->\" + conc)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Tile {\r\n    constructor(terrainType, roll = null, prob = null) {\r\n        this.edges = {\r\n            1: null, // individual nodes\r\n            2: null,\r\n            3: null,\r\n            4: null,\r\n            5: null,\r\n            6: null\r\n        }\r\n        this.prob = prob\r\n        this.terrainType = terrainType\r\n        this.roll = roll\r\n        this.roads = {}\r\n        this.blocked = false\r\n    }\r\n    toString() {\r\n        return ` ${this.roll} of ${this.terrainType}`\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.tiles = []\r\n        this.centerTile = null;\r\n        this.graph = new Graph(57)\r\n        this.terrains = [\r\n            \"Hills\", \"Mountain\", \"Hills\",\r\n            \"Fields\", \"Forest\", \"Forest\",\r\n            \"Fields\", \"Forest\", \"Pasture\",\r\n            \"Hills\", \"Pasture\", \"Mountain\",\r\n            \"Fields\", \"Fields\", \"Mountain\",\r\n            \"Pasture\", \"Pasture\", \"Desert\",\r\n            \"Forest\"\r\n        ]\r\n        this.numberChits = [\r\n            11, 3, 6,\r\n            5, 4, 9, 10,\r\n            8, 4, 11, 12,\r\n            9, 10, 8, 3,\r\n            6, 2, 5\r\n        ]\r\n        this.rolls = {\r\n            \"2\": [],\r\n            \"3\": [],\r\n            \"4\": [],\r\n            \"5\": [],\r\n            \"6\": [],\r\n            \"8\": [],\r\n            \"9\": [],\r\n            \"10\": [],\r\n            \"11\": [],\r\n            \"12\": []\r\n        }\r\n        this.terrainYields = {\r\n            \"Hills\": \"brick\",\r\n            \"Fields\": \"hay\",\r\n            \"Pasture\": \"sheep\",\r\n            \"Forest\": \"wood\",\r\n            \"Mountain\": \"mineral\"\r\n        }\r\n        this.probabilityHash = {\r\n            5: 4,\r\n            2: 1,\r\n            6: 5,\r\n            3: 2,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            12: 1,\r\n            11: 2,\r\n            4: 3,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            4: 3,\r\n            5: 4,\r\n            6: 5,\r\n            3: 2,\r\n            11: 2,\r\n            [null]: null\r\n        }\r\n    }\r\n\r\n    numHashGet(num) {\r\n        return this.circularArr(Number(num))\r\n    }\r\n\r\n    circularArr(n) {\r\n        if (0 < n && n < 7) {\r\n            return n\r\n        } else if (n > 6) {\r\n            return n - 6\r\n        } else if (n < 0) {\r\n            return n + 1 + 6\r\n        }\r\n    }\r\n\r\n    createTile() {\r\n        let terrain = this.terrains.shift()\r\n        let roll = terrain === \"Desert\" ? null : this.numberChits.shift()\r\n        let tile = new Tile(terrain, roll, this.probabilityHash[roll])\r\n        if (tile.roll) {\r\n            this.rolls[`${tile.roll}`].push(tile)\r\n        }\r\n        return tile\r\n    }\r\n    shuffleTilesAndNum() {\r\n\r\n    }\r\n\r\n    createCenterTile() {\r\n        let center = this.createTile()\r\n        this.connectTileNodes(center)\r\n        this.tiles.push(center)\r\n        this.centerTile = center\r\n    }\r\n\r\n    createInnerLayer() {\r\n        let centerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        for (let tileCount = 1; tileCount <= 6; tileCount++) {\r\n            let currentTile = this.createTile()\r\n            this.sharedNode(currentTile, currentTilePointer.first, centerPointer.first, this.centerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, centerPointer.second, this.centerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            centerPointer = { first: centerPointer.first + 1, second: centerPointer.second + 1 }\r\n            currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            this.tiles.push(currentTile)\r\n        }\r\n    }\r\n\r\n\r\n    createOuterLayer() {\r\n        let innerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        let tilePointer = 1\r\n        let innerTile = this.tiles[tilePointer]\r\n        for (let tileCount = 0; tileCount < 11; tileCount++) {\r\n            let currentTile = this.createTile()\r\n\r\n            this.sharedNode(currentTile, currentTilePointer.first, innerPointer.first, innerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, innerPointer.second, innerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            if (tileCount % 2 === 1) { //switch tile after every other iteration\r\n                tilePointer++\r\n                innerTile = this.tiles[tilePointer]\r\n            } else { // switch pointers in between\r\n                innerPointer = { first: innerPointer.first + 1, second: innerPointer.second + 1 }\r\n                currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            }\r\n            this.tiles.push(currentTile)\r\n        }\r\n\r\n    }\r\n    createLastTile() {\r\n        let lastTile = this.createTile()\r\n        lastTile.edges[1] = this.tiles[7].edges[5]\r\n        lastTile.edges[2] = this.tiles[7].edges[4]\r\n        lastTile.edges[3] = this.tiles[6].edges[1]\r\n        lastTile.edges[4] = this.tiles[17].edges[2]\r\n        lastTile.edges[5] = this.tiles[17].edges[1]\r\n        lastTile.edges[1].tiles.push(lastTile)\r\n        lastTile.edges[2].tiles.push(lastTile)\r\n        lastTile.edges[3].tiles.push(lastTile)\r\n        lastTile.edges[4].tiles.push(lastTile)\r\n        lastTile.edges[5].tiles.push(lastTile)\r\n        this.tiles.push(lastTile)\r\n        this.connectTileNodes(lastTile)\r\n    }\r\n\r\n    connectTileNodes(currentTile) {\r\n        let tileKeysArr = [...Object.keys(currentTile.edges), \"1\"]\r\n        tileKeysArr.reduce((prev, curr) => {\r\n            if (currentTile.edges[curr] === null) {\r\n                currentTile.edges[curr] = new Node(currentTile)\r\n                this.graph.addVertex(currentTile.edges[curr])\r\n            }\r\n            if (prev) {\r\n                this.graph.addEdge(currentTile.edges[curr], currentTile.edges[prev])\r\n            }\r\n            return curr\r\n        }, 0)\r\n    }\r\n\r\n    sharedNode(currentTile, currentTilePointer, referencePointer, referenceTile, increment) {\r\n\r\n        let referenceFirstNode = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        let adjacentNodes = this.graph.adjList.get(referenceFirstNode)\r\n        if (referenceFirstNode.tiles.length === 2) {\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)] = adjacentNodes[2]\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].tiles.push(currentTile)\r\n        }\r\n        currentTile.edges[this.numHashGet(currentTilePointer)] = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].tiles.push(currentTile)\r\n    }\r\n\r\n    shuffle(a = this.terrains) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        this.terrains = a\r\n        // let innerLayer = this.numberChits.slice(1, 7)\r\n        // let outerLayer = this.numberChits.slice(7, this.terrains.length)\r\n        let shift = (Math.floor(Math.random() * 6) + 1)\r\n        // console.log(this.numberChits.slice(0, 7), this.numberChits.slice(7), shift)\r\n        let newInner = [...this.numberChits.slice(shift, 7), ...this.numberChits.slice(1, shift)]\r\n        let newOuter = [...this.numberChits.slice(shift + 7, this.numberChits.length), ...this.numberChits.slice(7, shift + 7)]\r\n        // this.numberChits = [this.numberChits[0], ...newInner, ...newOuter]\r\n        // console.log(newInner, newOuter)\r\n\r\n    }\r\n\r\n    createBoard() {\r\n        this.shuffle()\r\n        this.createCenterTile()\r\n        this.createInnerLayer()\r\n        this.createOuterLayer()\r\n        this.createLastTile()\r\n        for (let node of this.graph.adjList) {\r\n            node[0].tiles = []\r\n        }\r\n    }\r\n}\r\n\r\nclass BuildItem {\r\n    constructor(itemType, color) { // can be roads, settlements, or cities\r\n        this.item = itemType\r\n        this.color = color\r\n    }\r\n    decrement() {\r\n        this.quantity--\r\n    }\r\n    increment() {\r\n        this.quantity++\r\n    }\r\n}\r\n\r\nclass Player {\r\n    constructor(name, color) {\r\n        this.name = name\r\n        this.color = color\r\n        this.roads = Array.from({ length: 15 }, (_) => new BuildItem(\"road\", color))\r\n        this.settlements = Array.from({ length: 15 }, (_) => new BuildItem(\"settlement\", color))\r\n        this.cities = Array.from({ length: 15 }, (_) => new BuildItem(\"city\", color))\r\n        this.cards = {\r\n            \"wood\": 0,\r\n            \"brick\": 0,\r\n            \"hay\": 0,\r\n            \"sheep\": 0,\r\n            \"mineral\": 0\r\n        }\r\n        this.handQuantity = Object.keys(this.cards).reduce((acc, curr) => acc + this.cards[curr], 0)\r\n        this.points = 0\r\n        this.turn = false\r\n    }\r\n    toString() {\r\n        return `Player(name=${this.name}, color=${this.color})`\r\n    }\r\n}\r\n\r\nlet board = new Board()\r\nboard.createBoard()\r\n\r\nexport { board, Player }\r\n\r\n\r\n\r\n","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js",["71"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js",["72","73","74"],{"ruleId":"75","severity":1,"message":"76","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":24},{"ruleId":"75","severity":1,"message":"79","line":4,"column":7,"nodeType":"77","messageId":"78","endLine":4,"endColumn":12},{"ruleId":"75","severity":1,"message":"80","line":10,"column":11,"nodeType":"77","messageId":"78","endLine":10,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":79,"column":33,"nodeType":"83","messageId":"84","endLine":79,"endColumn":35},{"ruleId":"75","severity":1,"message":"85","line":180,"column":10,"nodeType":"77","messageId":"78","endLine":180,"endColumn":19},{"ruleId":"75","severity":1,"message":"86","line":242,"column":7,"nodeType":"77","messageId":"78","endLine":242,"endColumn":13},{"ruleId":"87","severity":2,"message":"88","line":246,"column":60,"nodeType":"77","messageId":"89","endLine":246,"endColumn":69},{"ruleId":"87","severity":2,"message":"88","line":247,"column":66,"nodeType":"77","messageId":"89","endLine":247,"endColumn":75},{"ruleId":"87","severity":2,"message":"88","line":248,"column":61,"nodeType":"77","messageId":"89","endLine":248,"endColumn":70},{"ruleId":"75","severity":1,"message":"90","line":234,"column":10,"nodeType":"77","messageId":"78","endLine":234,"endColumn":25},{"ruleId":"91","severity":1,"message":"92","line":123,"column":13,"nodeType":"93","messageId":"84","endLine":123,"endColumn":14},{"ruleId":"91","severity":1,"message":"94","line":124,"column":13,"nodeType":"93","messageId":"84","endLine":124,"endColumn":15},{"ruleId":"91","severity":1,"message":"95","line":125,"column":13,"nodeType":"93","messageId":"84","endLine":125,"endColumn":14},{"ruleId":"91","severity":1,"message":"96","line":126,"column":13,"nodeType":"93","messageId":"84","endLine":126,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":127,"column":13,"nodeType":"93","messageId":"84","endLine":127,"endColumn":14},{"ruleId":"91","severity":1,"message":"98","line":128,"column":13,"nodeType":"93","messageId":"84","endLine":128,"endColumn":14},{"ruleId":"91","severity":1,"message":"99","line":129,"column":13,"nodeType":"93","messageId":"84","endLine":129,"endColumn":14},{"ruleId":"91","severity":1,"message":"100","line":130,"column":13,"nodeType":"93","messageId":"84","endLine":130,"endColumn":15},{"ruleId":"75","severity":1,"message":"101","line":260,"column":13,"nodeType":"77","messageId":"78","endLine":260,"endColumn":21},{"ruleId":"75","severity":1,"message":"102","line":261,"column":13,"nodeType":"77","messageId":"78","endLine":261,"endColumn":21},{"ruleId":"75","severity":1,"message":"103","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},{"ruleId":"75","severity":1,"message":"104","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":18},{"ruleId":"75","severity":1,"message":"105","line":3,"column":20,"nodeType":"77","messageId":"78","endLine":3,"endColumn":30},{"ruleId":"75","severity":1,"message":"106","line":7,"column":11,"nodeType":"77","messageId":"78","endLine":7,"endColumn":20},"no-unused-vars","'TicTacToeBoard' is defined but never used.","Identifier","unusedVar","'moves' is assigned a value but never used.","'scoreboard' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'IsVictory' is defined but never used.","'Player' is defined but never used.","no-undef","'BuildItem' is not defined.","undef","'piece_generator' is defined but never used.","no-dupe-keys","Duplicate key '8'.","ObjectExpression","Duplicate key '10'.","Duplicate key '9'.","Duplicate key '4'.","Duplicate key '5'.","Duplicate key '6'.","Duplicate key '3'.","Duplicate key '11'.","'newInner' is assigned a value but never used.","'newOuter' is assigned a value but never used.","'useState' is defined but never used.","'faCoffee' is defined but never used.","'faBuilding' is defined but never used.","'colorHash' is assigned a value but never used."]
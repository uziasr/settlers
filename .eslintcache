[{"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js":"1","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js":"2","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js":"3","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js":"4","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js":"5","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js":"6","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js":"7","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js":"8","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js":"9","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js":"10","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js":"11","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js":"12","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js":"13","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ScoreBoard.js":"14"},{"size":383,"mtime":1609627561150,"results":"15","hashOfConfig":"16"},{"size":0,"mtime":1608604050967,"results":"17","hashOfConfig":"16"},{"size":501,"mtime":1609627543464,"results":"18","hashOfConfig":"16"},{"size":10312,"mtime":1609734018694,"results":"19","hashOfConfig":"16"},{"size":362,"mtime":1606617756002,"results":"20","hashOfConfig":"16"},{"size":1138,"mtime":1608625959223,"results":"21","hashOfConfig":"16"},{"size":9869,"mtime":1608761823587,"results":"22","hashOfConfig":"16"},{"size":11454,"mtime":1609735045772,"results":"23","hashOfConfig":"16"},{"size":12738,"mtime":1609621901794,"results":"24","hashOfConfig":"16"},{"size":1000,"mtime":1609737223883,"results":"25","hashOfConfig":"16"},{"size":4991,"mtime":1609734649249,"results":"26","hashOfConfig":"16"},{"size":900,"mtime":1609221892317,"results":"27","hashOfConfig":"16"},{"size":7064,"mtime":1609662681132,"results":"28","hashOfConfig":"16"},{"size":1361,"mtime":1609735171360,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"odkh2z",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js",["62"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js",["63","64","65","66","67"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js",[],["68","69"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js",["70","71","72","73"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js",["74"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js",["75","76","77","78","79","80","81","82","83","84","85","86","87","88"],"class Node {\r\n    constructor(tile) {\r\n        this.placement = null;\r\n        this.tiles = [tile]\r\n        this.yields = []\r\n        this.canBuild = true\r\n        this.roadsTo = {}\r\n    }\r\n    // toString() {\r\n    //     return `[${this.tiles}]`\r\n    // }\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.adjList = new Map() // adjacency list, keys = vertex, values hold an array of adjacent node\r\n    }\r\n    addVertex(v) {\r\n        this.adjList.set(v, [])\r\n    }\r\n    addEdge(v, w) {\r\n        // grabs the vertex and passes it to the array value\r\n        // then vice versa\r\n        if (this.adjList.get(v).includes(w) && this.adjList.get(w).includes(v)) {\r\n            return\r\n        } else {\r\n            this.adjList.get(v).push(w)\r\n            this.adjList.get(w).push(v)\r\n        }\r\n    }\r\n    printGraph() {\r\n        var getKeys = this.adjList.keys();\r\n\r\n        for (var i of getKeys) {\r\n            var getValues = this.adjList.get(i)\r\n            var conc = \"\"\r\n\r\n            for (var j of getValues) {\r\n                conc += j + \" \"\r\n            }\r\n            console.log(i + \" ->\" + conc)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Tile {\r\n    constructor(terrainType, roll = null, prob = null) {\r\n        this.edges = {\r\n            1: null, // individual nodes\r\n            2: null,\r\n            3: null,\r\n            4: null,\r\n            5: null,\r\n            6: null\r\n        }\r\n        this.prob = prob\r\n        this.terrainType = terrainType\r\n        this.roll = roll\r\n        this.roads = {}\r\n        this.blocked = false\r\n    }\r\n    toString() {\r\n        return ` ${this.roll} of ${this.terrainType}`\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.tiles = []\r\n        this.centerTile = null;\r\n        this.graph = new Graph(57)\r\n        this.terrains = [\r\n            \"Hills\", \"Mountain\", \"Hills\",\r\n            \"Fields\", \"Forest\", \"Forest\",\r\n            \"Fields\", \"Forest\", \"Pasture\",\r\n            \"Hills\", \"Pasture\", \"Mountain\",\r\n            \"Fields\", \"Fields\", \"Mountain\",\r\n            \"Pasture\", \"Pasture\", \"Desert\",\r\n            \"Forest\"\r\n        ]\r\n        this.numberChits = [\r\n            11, 3, 6,\r\n            5, 4, 9, 10,\r\n            8, 4, 11, 12,\r\n            9, 10, 8, 3,\r\n            6, 2, 5\r\n        ]\r\n        this.rolls = {\r\n            \"2\": [],\r\n            \"3\": [],\r\n            \"4\": [],\r\n            \"5\": [],\r\n            \"6\": [],\r\n            \"8\": [],\r\n            \"9\": [],\r\n            \"10\": [],\r\n            \"11\": [],\r\n            \"12\": []\r\n        }\r\n        this.terrainYields = {\r\n            \"Hills\": \"brick\",\r\n            \"Fields\": \"hay\",\r\n            \"Pasture\": \"sheep\",\r\n            \"Forest\": \"wood\",\r\n            \"Mountain\": \"mineral\",\r\n            \"Desert\": null\r\n        }\r\n        this.probabilityHash = {\r\n            5: 4,\r\n            2: 1,\r\n            6: 5,\r\n            3: 2,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            12: 1,\r\n            11: 2,\r\n            4: 3,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            4: 3,\r\n            5: 4,\r\n            6: 5,\r\n            3: 2,\r\n            11: 2,\r\n            [null]: null\r\n        }\r\n        this.placements = {}\r\n    }\r\n\r\n    numHashGet(num) {\r\n        return this.circularArr(Number(num))\r\n    }\r\n\r\n    circularArr(n) {\r\n        if (0 < n && n < 7) {\r\n            return n\r\n        } else if (n > 6) {\r\n            return n - 6\r\n        } else if (n < 0) {\r\n            return n + 1 + 6\r\n        }\r\n    }\r\n\r\n    createTile() {\r\n        let terrain = this.terrains.shift()\r\n        let roll = terrain === \"Desert\" ? null : this.numberChits.shift()\r\n        let tile = new Tile(terrain, roll, this.probabilityHash[roll])\r\n        if (tile.roll) {\r\n            this.rolls[`${tile.roll}`].push(tile)\r\n        }\r\n        return tile\r\n    }\r\n    shuffleTilesAndNum() {\r\n\r\n    }\r\n\r\n    createCenterTile() {\r\n        let center = this.createTile()\r\n        this.connectTileNodes(center)\r\n        this.tiles.push(center)\r\n        this.centerTile = center\r\n    }\r\n\r\n    createInnerLayer() {\r\n        let centerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        for (let tileCount = 1; tileCount <= 6; tileCount++) {\r\n            let currentTile = this.createTile()\r\n            this.sharedNode(currentTile, currentTilePointer.first, centerPointer.first, this.centerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, centerPointer.second, this.centerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            centerPointer = { first: centerPointer.first + 1, second: centerPointer.second + 1 }\r\n            currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            this.tiles.push(currentTile)\r\n        }\r\n    }\r\n\r\n\r\n    createOuterLayer() {\r\n        let innerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        let tilePointer = 1\r\n        let innerTile = this.tiles[tilePointer]\r\n        for (let tileCount = 0; tileCount < 11; tileCount++) {\r\n            let currentTile = this.createTile()\r\n\r\n            this.sharedNode(currentTile, currentTilePointer.first, innerPointer.first, innerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, innerPointer.second, innerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            if (tileCount % 2 === 1) { //switch tile after every other iteration\r\n                tilePointer++\r\n                innerTile = this.tiles[tilePointer]\r\n            } else { // switch pointers in between\r\n                innerPointer = { first: innerPointer.first + 1, second: innerPointer.second + 1 }\r\n                currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            }\r\n            this.tiles.push(currentTile)\r\n        }\r\n\r\n    }\r\n    createLastTile() {\r\n        let lastTile = this.createTile()\r\n        lastTile.edges[1] = this.tiles[7].edges[5]\r\n        lastTile.edges[2] = this.tiles[7].edges[4]\r\n        lastTile.edges[3] = this.tiles[6].edges[1]\r\n        lastTile.edges[4] = this.tiles[17].edges[2]\r\n        lastTile.edges[5] = this.tiles[17].edges[1]\r\n        lastTile.edges[1].tiles.push(lastTile)\r\n        lastTile.edges[2].tiles.push(lastTile)\r\n        lastTile.edges[3].tiles.push(lastTile)\r\n        lastTile.edges[4].tiles.push(lastTile)\r\n        lastTile.edges[5].tiles.push(lastTile)\r\n\r\n        lastTile.edges[1].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[2].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[3].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[4].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[5].yields.push(this.terrainYields[lastTile.terrainType])\r\n\r\n        this.tiles.push(lastTile)\r\n        this.connectTileNodes(lastTile)\r\n    }\r\n\r\n    connectTileNodes(currentTile) {\r\n        let tileKeysArr = [...Object.keys(currentTile.edges), \"1\"]\r\n        tileKeysArr.reduce((prev, curr) => {\r\n            if (currentTile.edges[curr] === null) {\r\n                currentTile.edges[curr] = new Node(currentTile)\r\n                currentTile.edges[curr].yields.push(this.terrainYields[currentTile.terrainType])\r\n                this.graph.addVertex(currentTile.edges[curr])\r\n            }\r\n            if (prev) {\r\n                this.graph.addEdge(currentTile.edges[curr], currentTile.edges[prev])\r\n            }\r\n            return curr\r\n        }, 0)\r\n    }\r\n\r\n    sharedNode(currentTile, currentTilePointer, referencePointer, referenceTile, increment) {\r\n\r\n        let referenceFirstNode = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        let adjacentNodes = this.graph.adjList.get(referenceFirstNode)\r\n        if (referenceFirstNode.tiles.length === 2) {\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)] = adjacentNodes[2]\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].tiles.push(currentTile)\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].yields.push(this.terrainYields[currentTile.terrainType])\r\n        }\r\n        currentTile.edges[this.numHashGet(currentTilePointer)] = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].tiles.push(currentTile)\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].yields.push(this.terrainYields[currentTile.terrainType])\r\n\r\n    }\r\n\r\n    shuffle(a = this.terrains) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        this.terrains = a\r\n        // let innerLayer = this.numberChits.slice(1, 7)\r\n        // let outerLayer = this.numberChits.slice(7, this.terrains.length)\r\n        let shift = (Math.floor(Math.random() * 6) + 1)\r\n        // console.log(this.numberChits.slice(0, 7), this.numberChits.slice(7), shift)\r\n        let newInner = [...this.numberChits.slice(shift, 7), ...this.numberChits.slice(1, shift)]\r\n        let newOuter = [...this.numberChits.slice(shift + 7, this.numberChits.length), ...this.numberChits.slice(7, shift + 7)]\r\n        // this.numberChits = [this.numberChits[0], ...newInner, ...newOuter]\r\n        // console.log(newInner, newOuter)\r\n\r\n    }\r\n\r\n    connectRoad(targetNode, fromNode, road) {\r\n        console.log(road)\r\n        targetNode.roadsTo[road] = fromNode\r\n        fromNode.roadsTo[road] = targetNode\r\n    }\r\n\r\n    createBoard() {\r\n        this.shuffle()\r\n        this.createCenterTile()\r\n        this.createInnerLayer()\r\n        this.createOuterLayer()\r\n        this.createLastTile()\r\n        for (let node of this.graph.adjList) {\r\n            node[0].tiles = []\r\n        }\r\n    }\r\n}\r\n\r\nclass BuildItem {\r\n    constructor(itemType, color) { // can be roads, settlements, or cities\r\n        this.item = itemType\r\n        this.color = color\r\n    }\r\n    decrement() {\r\n        this.quantity--\r\n    }\r\n    increment() {\r\n        this.quantity++\r\n    }\r\n}\r\n\r\nclass Player {\r\n    constructor(name, color) {\r\n        this.name = name\r\n        this.color = color\r\n        this.roads = Array.from({ length: 15 }, (_) => new BuildItem(\"road\", color))\r\n        this.settlements = Array.from({ length: 5 }, (_) => new BuildItem(\"settlement\", color))\r\n        this.cities = Array.from({ length: 4 }, (_) => new BuildItem(\"city\", color))\r\n        this.cards = {\r\n            \"wood\": 0,\r\n            \"brick\": 0,\r\n            \"hay\": 0,\r\n            \"sheep\": 0,\r\n            \"mineral\": 0\r\n        }\r\n        this.handQuantity = Object.keys(this.cards).reduce((acc, curr) => acc + this.cards[curr], 0)\r\n        this.points = 0\r\n        this.developmentCards = []\r\n    }\r\n    toString() {\r\n        return `Player(name=${this.name}, color=${this.color})`\r\n    }\r\n}\r\n\r\nclass DevelopmentCard {\r\n    constructor(type, useable = true) {\r\n        this.type = type\r\n        this.useable = useable\r\n    }\r\n    use() {\r\n\r\n    }\r\n    effect() {\r\n        switch (this.type) {\r\n            case \"Knight\": {\r\n\r\n            }\r\n            case \"Road Builder\": {\r\n\r\n            }\r\n            case \"Year of Plenty\": {\r\n\r\n            }\r\n            case \"Monopoly\": {\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass DevelopmentDeck {\r\n    constructor() {\r\n        this.deck = this.createDeck()\r\n    }\r\n    createDeck() {\r\n        const knights = \"Knight,\".repeat(14).trim().split(\",\").slice(0, 14).map(card => new DevelopmentCard(card, false))\r\n        const victory = \"Victory Point,\".repeat(5).trim().split(\",\").slice(0, 5).map(card => new DevelopmentCard(card, false))\r\n        const roadBuilder = \"Road Builder,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        const yearOfPlenty = \"Year of Plenty,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        const monopoly = \"Monopoly,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        let deck = [...knights, ...victory, ...roadBuilder, ...yearOfPlenty, ...monopoly]\r\n        for (let i = deck.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [deck[i], deck[j]] = [deck[j], deck[i]];\r\n        }\r\n        return deck\r\n    }\r\n}\r\n\r\nlet board = new Board()\r\nboard.createBoard()\r\nlet developmentCards = new DevelopmentDeck()\r\ndevelopmentCards.createDeck()\r\nconsole.log(board.graph.adjList)\r\nexport { board, Player, developmentCards }\r\n\r\n\r\n\r\n","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js",["89"],"import React, { useState } from 'react';\r\nimport DCDialog from \"./DevelopmentCardDialog\"\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Dice from \"./Dice\"\r\n\r\nlet developmentCards = [\r\n    { type: \"Knight\", useable: true, img: \"image/knight.jpg\" },\r\n    { type: \"Victory Point\", useable: true, img: \"image/victoryPoint.jpg\" },\r\n    { type: \"Road Builder\", useable: true, img: \"image/roadBuilder.jpg\" },\r\n    { type: \"Year of Plenty\", useable: true, img: \"image/yearOfPlenty.jpg\" },\r\n    { type: \"Monopoly\", useable: true, img: \"image/monopoly.jpg\" }\r\n]\r\n\r\nconst ActiveTurn = ({ setBuildType, endTurn, roll, player, buildType }) => {\r\n\r\n    let placeHolderCard = { type: \"Knight\", useable: false, img: \"image/knight.jpg\" }\r\n    const [open, setOpen] = useState(false);\r\n    const [focusedDC, setFocusedDC] = useState(placeHolderCard)\r\n\r\n    const handleClickOpen = (dc) => {\r\n        setFocusedDC(() => dc)\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div className=\"userControls\">\r\n            <div className=\"cards\">\r\n                <div className=\"resourceRoot\">\r\n                    <h3>Hand</h3>\r\n                    <div className=\"resources\">\r\n                        <div className=\"resourceCard\">🌲 x {player.cards[\"wood\"]}</div>\r\n                        <div className=\"resourceCard\">🧱 x {player.cards[\"brick\"]}</div>\r\n                        <div className=\"resourceCard\">🌾 x {player.cards[\"hay\"]}</div>\r\n                        <div className=\"resourceCard\">🐑 x {player.cards[\"sheep\"]}</div>\r\n                        <div className=\"resourceCard\"><span style={{ color: \"black\" }}>⛏</span> x {player.cards[\"mineral\"]}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"developmentCardsRoot\">\r\n                    <h3>Development Cards</h3>\r\n                    <div className=\"developmentCards\">\r\n                        {developmentCards.length ?\r\n                            developmentCards.map((dc, index) => (\r\n                                <div key={index} onClick={() => handleClickOpen(dc)} className=\"developmentCard\">\r\n                                    <img className=\"developmentCardImg\" src={dc.img}></img>\r\n                                </div>\r\n                            ))\r\n                            :\r\n                            <div style={{ visibility: \"hidden\" }} className=\"developmentCard\">\r\n                                <img className=\"developmentCardImg\" alt=\"sneaky but you can't use :)\" src={placeHolderCard.img}></img>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"actionButtonsDiceWrap\">\r\n                <div className=\"actionButtons\">\r\n                    <h3 style={{ marginBottom: \"10px\" }}>Moves</h3>\r\n                    <div className=\"topBuilds\">\r\n                        <Tooltip title={buildType === \"road\" ? \"Select a node\" : \"1 wood, 1 brick\"}>\r\n                            <div className=\"build\" onClick={() => setBuildType(\"road\")}>\r\n                                <p style={{ color: buildType === \"road\" ? \"white\" : \"black\" }}>Road</p>\r\n                            </div>\r\n                        </Tooltip>\r\n                        <Tooltip title={buildType === \"settlement\" ? \"Select a node\" : \"1 wood, 1 brick, 1 sheep, 1 hay\"}>\r\n                            <div className=\"build\" onClick={() => setBuildType(\"settlement\")}>\r\n                                <p style={{ color: buildType === \"settlement\" ? \"white\" : \"black\" }}>Settlement</p>\r\n                            </div>\r\n                        </Tooltip>\r\n                        <div className=\"build\" style={{ background: \"mediumseagreen\" }}>\r\n                            <p>Trade</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bottomBuilds\">\r\n                        <Tooltip title={buildType === \"city\" ? \"Select a node\" : \"3 hay, 2 mineral\"}>\r\n                            <div className=\"build\" onClick={() => setBuildType(\"city\")}>\r\n                                <p style={{ color: buildType === \"city\" ? \"white\" : \"black\" }}>City</p>\r\n                            </div>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"1 sheep, 1 hay, 1 mineral\">\r\n                            <div className=\"build\">\r\n                                <p>Development Card</p>\r\n                            </div>\r\n                        </Tooltip>\r\n                        <div className=\"build endTurnButton\" style={{ background: \"rgb(223, 91, 91)\" }} onClick={() => endTurn()}>\r\n                            <p>End Turn </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Dice roll={roll} />\r\n            </div>\r\n            <DCDialog open={open} setOpen={setOpen} dc={focusedDC} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActiveTurn;","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js",["90","91"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee, faBuilding, faHome } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Nodes = ({ nodes, nodeHash, nodeAction }) => {\r\n    let validNodes = [...Object.keys(nodes)]\r\n    // const colorHash = {\r\n    //     \"0\": \"white\",\r\n    //     \"1\": \"red\",\r\n    //     \"2\": \"blue\",\r\n    //     \"3\": \"orange\"\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            {validNodes.map((nodeIndex, index) => (\r\n                <div key={index} style={{ ...nodeHash[nodeIndex], color: nodes[nodeIndex].placement ? nodes[nodeIndex].placement.color : \"black\", cursor: \"pointer\" }} onClick={() => nodeAction(nodes[nodeIndex])}>\r\n                    {nodes[nodeIndex].placement ? <FontAwesomeIcon icon={faHome} /> : <p>o</p>}\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Nodes;","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js",["92","93","94"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ScoreBoard.js",["95"],{"ruleId":"96","severity":1,"message":"97","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":24},{"ruleId":"96","severity":1,"message":"100","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":17},{"ruleId":"101","severity":1,"message":"102","line":12,"column":27,"nodeType":"103","messageId":"104","endLine":12,"endColumn":29},{"ruleId":"101","severity":1,"message":"102","line":123,"column":72,"nodeType":"103","messageId":"104","endLine":123,"endColumn":74},{"ruleId":"96","severity":1,"message":"105","line":164,"column":11,"nodeType":"98","messageId":"99","endLine":164,"endColumn":21},{"ruleId":"96","severity":1,"message":"106","line":302,"column":10,"nodeType":"98","messageId":"99","endLine":302,"endColumn":19},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"96","severity":1,"message":"111","line":242,"column":7,"nodeType":"98","messageId":"99","endLine":242,"endColumn":13},{"ruleId":"112","severity":2,"message":"113","line":246,"column":60,"nodeType":"98","messageId":"114","endLine":246,"endColumn":69},{"ruleId":"112","severity":2,"message":"113","line":247,"column":66,"nodeType":"98","messageId":"114","endLine":247,"endColumn":75},{"ruleId":"112","severity":2,"message":"113","line":248,"column":61,"nodeType":"98","messageId":"114","endLine":248,"endColumn":70},{"ruleId":"96","severity":1,"message":"115","line":246,"column":10,"nodeType":"98","messageId":"99","endLine":246,"endColumn":25},{"ruleId":"116","severity":1,"message":"117","line":123,"column":13,"nodeType":"118","messageId":"104","endLine":123,"endColumn":14},{"ruleId":"116","severity":1,"message":"119","line":124,"column":13,"nodeType":"118","messageId":"104","endLine":124,"endColumn":15},{"ruleId":"116","severity":1,"message":"120","line":125,"column":13,"nodeType":"118","messageId":"104","endLine":125,"endColumn":14},{"ruleId":"116","severity":1,"message":"121","line":126,"column":13,"nodeType":"118","messageId":"104","endLine":126,"endColumn":14},{"ruleId":"116","severity":1,"message":"122","line":127,"column":13,"nodeType":"118","messageId":"104","endLine":127,"endColumn":14},{"ruleId":"116","severity":1,"message":"123","line":128,"column":13,"nodeType":"118","messageId":"104","endLine":128,"endColumn":14},{"ruleId":"116","severity":1,"message":"124","line":129,"column":13,"nodeType":"118","messageId":"104","endLine":129,"endColumn":14},{"ruleId":"116","severity":1,"message":"125","line":130,"column":13,"nodeType":"118","messageId":"104","endLine":130,"endColumn":15},{"ruleId":"96","severity":1,"message":"126","line":272,"column":13,"nodeType":"98","messageId":"99","endLine":272,"endColumn":21},{"ruleId":"96","severity":1,"message":"127","line":273,"column":13,"nodeType":"98","messageId":"99","endLine":273,"endColumn":21},{"ruleId":"128","severity":1,"message":"129","line":342,"column":9,"nodeType":"130","messageId":"131","endLine":355,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":346,"column":13,"nodeType":"134","messageId":"135","endLine":348,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":349,"column":13,"nodeType":"134","messageId":"135","endLine":351,"endColumn":14},{"ruleId":"132","severity":1,"message":"133","line":352,"column":13,"nodeType":"134","messageId":"135","endLine":354,"endColumn":14},{"ruleId":"136","severity":1,"message":"137","line":44,"column":37,"nodeType":"138","endLine":44,"endColumn":86},{"ruleId":"96","severity":1,"message":"139","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"140","line":3,"column":20,"nodeType":"98","messageId":"99","endLine":3,"endColumn":30},{"ruleId":"101","severity":1,"message":"102","line":70,"column":26,"nodeType":"103","messageId":"104","endLine":70,"endColumn":28},{"ruleId":"101","severity":1,"message":"102","line":170,"column":35,"nodeType":"103","messageId":"104","endLine":170,"endColumn":37},{"ruleId":"136","severity":1,"message":"137","line":187,"column":48,"nodeType":"138","endLine":187,"endColumn":66},{"ruleId":"96","severity":1,"message":"141","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":25},"no-unused-vars","'TicTacToeBoard' is defined but never used.","Identifier","unusedVar","'current' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'scoreboard' is assigned a value but never used.","'IsVictory' is defined but never used.","no-native-reassign",["142"],"no-negated-in-lhs",["143"],"'Player' is defined but never used.","no-undef","'BuildItem' is not defined.","undef","'piece_generator' is defined but never used.","no-dupe-keys","Duplicate key '8'.","ObjectExpression","Duplicate key '10'.","Duplicate key '9'.","Duplicate key '4'.","Duplicate key '5'.","Duplicate key '6'.","Duplicate key '3'.","Duplicate key '11'.","'newInner' is assigned a value but never used.","'newOuter' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'faCoffee' is defined but never used.","'faBuilding' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]
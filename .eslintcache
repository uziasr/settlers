[{"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js":"1","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js":"2","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js":"3","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js":"4","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js":"5","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js":"6","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js":"7","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js":"8","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js":"9","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js":"10","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js":"11","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js":"12","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js":"13"},{"size":383,"mtime":1609627561150,"results":"14","hashOfConfig":"15"},{"size":0,"mtime":1608604050967,"results":"16","hashOfConfig":"15"},{"size":501,"mtime":1609627543464,"results":"17","hashOfConfig":"15"},{"size":10312,"mtime":1609627344277,"results":"18","hashOfConfig":"15"},{"size":362,"mtime":1606617756002,"results":"19","hashOfConfig":"15"},{"size":1138,"mtime":1608625959223,"results":"20","hashOfConfig":"15"},{"size":9869,"mtime":1608761823587,"results":"21","hashOfConfig":"15"},{"size":10922,"mtime":1609633722568,"results":"22","hashOfConfig":"15"},{"size":12738,"mtime":1609621901794,"results":"23","hashOfConfig":"15"},{"size":917,"mtime":1609574845653,"results":"24","hashOfConfig":"15"},{"size":3894,"mtime":1609648762079,"results":"25","hashOfConfig":"15"},{"size":900,"mtime":1609221892317,"results":"26","hashOfConfig":"15"},{"size":3438,"mtime":1609648565966,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"odkh2z",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js",["57"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js",["58","59","60","61","62"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Board.js",[],["63","64"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\CatanBoard.js",["65","66","67","68"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js",["69"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js",["70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"class Node {\r\n    constructor(tile) {\r\n        this.placement = null;\r\n        this.tiles = [tile]\r\n        this.yields = []\r\n        this.canBuild = true\r\n        this.roadsTo = {}\r\n    }\r\n    // toString() {\r\n    //     return `[${this.tiles}]`\r\n    // }\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.adjList = new Map() // adjacency list, keys = vertex, values hold an array of adjacent node\r\n    }\r\n    addVertex(v) {\r\n        this.adjList.set(v, [])\r\n    }\r\n    addEdge(v, w) {\r\n        // grabs the vertex and passes it to the array value\r\n        // then vice versa\r\n        if (this.adjList.get(v).includes(w) && this.adjList.get(w).includes(v)) {\r\n            return\r\n        } else {\r\n            this.adjList.get(v).push(w)\r\n            this.adjList.get(w).push(v)\r\n        }\r\n    }\r\n    printGraph() {\r\n        var getKeys = this.adjList.keys();\r\n\r\n        for (var i of getKeys) {\r\n            var getValues = this.adjList.get(i)\r\n            var conc = \"\"\r\n\r\n            for (var j of getValues) {\r\n                conc += j + \" \"\r\n            }\r\n            console.log(i + \" ->\" + conc)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Tile {\r\n    constructor(terrainType, roll = null, prob = null) {\r\n        this.edges = {\r\n            1: null, // individual nodes\r\n            2: null,\r\n            3: null,\r\n            4: null,\r\n            5: null,\r\n            6: null\r\n        }\r\n        this.prob = prob\r\n        this.terrainType = terrainType\r\n        this.roll = roll\r\n        this.roads = {}\r\n        this.blocked = false\r\n    }\r\n    toString() {\r\n        return ` ${this.roll} of ${this.terrainType}`\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.tiles = []\r\n        this.centerTile = null;\r\n        this.graph = new Graph(57)\r\n        this.terrains = [\r\n            \"Hills\", \"Mountain\", \"Hills\",\r\n            \"Fields\", \"Forest\", \"Forest\",\r\n            \"Fields\", \"Forest\", \"Pasture\",\r\n            \"Hills\", \"Pasture\", \"Mountain\",\r\n            \"Fields\", \"Fields\", \"Mountain\",\r\n            \"Pasture\", \"Pasture\", \"Desert\",\r\n            \"Forest\"\r\n        ]\r\n        this.numberChits = [\r\n            11, 3, 6,\r\n            5, 4, 9, 10,\r\n            8, 4, 11, 12,\r\n            9, 10, 8, 3,\r\n            6, 2, 5\r\n        ]\r\n        this.rolls = {\r\n            \"2\": [],\r\n            \"3\": [],\r\n            \"4\": [],\r\n            \"5\": [],\r\n            \"6\": [],\r\n            \"8\": [],\r\n            \"9\": [],\r\n            \"10\": [],\r\n            \"11\": [],\r\n            \"12\": []\r\n        }\r\n        this.terrainYields = {\r\n            \"Hills\": \"brick\",\r\n            \"Fields\": \"hay\",\r\n            \"Pasture\": \"sheep\",\r\n            \"Forest\": \"wood\",\r\n            \"Mountain\": \"mineral\",\r\n            \"Desert\": null\r\n        }\r\n        this.probabilityHash = {\r\n            5: 4,\r\n            2: 1,\r\n            6: 5,\r\n            3: 2,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            12: 1,\r\n            11: 2,\r\n            4: 3,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            4: 3,\r\n            5: 4,\r\n            6: 5,\r\n            3: 2,\r\n            11: 2,\r\n            [null]: null\r\n        }\r\n        this.placements = {}\r\n    }\r\n\r\n    numHashGet(num) {\r\n        return this.circularArr(Number(num))\r\n    }\r\n\r\n    circularArr(n) {\r\n        if (0 < n && n < 7) {\r\n            return n\r\n        } else if (n > 6) {\r\n            return n - 6\r\n        } else if (n < 0) {\r\n            return n + 1 + 6\r\n        }\r\n    }\r\n\r\n    createTile() {\r\n        let terrain = this.terrains.shift()\r\n        let roll = terrain === \"Desert\" ? null : this.numberChits.shift()\r\n        let tile = new Tile(terrain, roll, this.probabilityHash[roll])\r\n        if (tile.roll) {\r\n            this.rolls[`${tile.roll}`].push(tile)\r\n        }\r\n        return tile\r\n    }\r\n    shuffleTilesAndNum() {\r\n\r\n    }\r\n\r\n    createCenterTile() {\r\n        let center = this.createTile()\r\n        this.connectTileNodes(center)\r\n        this.tiles.push(center)\r\n        this.centerTile = center\r\n    }\r\n\r\n    createInnerLayer() {\r\n        let centerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        for (let tileCount = 1; tileCount <= 6; tileCount++) {\r\n            let currentTile = this.createTile()\r\n            this.sharedNode(currentTile, currentTilePointer.first, centerPointer.first, this.centerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, centerPointer.second, this.centerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            centerPointer = { first: centerPointer.first + 1, second: centerPointer.second + 1 }\r\n            currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            this.tiles.push(currentTile)\r\n        }\r\n    }\r\n\r\n\r\n    createOuterLayer() {\r\n        let innerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        let tilePointer = 1\r\n        let innerTile = this.tiles[tilePointer]\r\n        for (let tileCount = 0; tileCount < 11; tileCount++) {\r\n            let currentTile = this.createTile()\r\n\r\n            this.sharedNode(currentTile, currentTilePointer.first, innerPointer.first, innerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, innerPointer.second, innerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            if (tileCount % 2 === 1) { //switch tile after every other iteration\r\n                tilePointer++\r\n                innerTile = this.tiles[tilePointer]\r\n            } else { // switch pointers in between\r\n                innerPointer = { first: innerPointer.first + 1, second: innerPointer.second + 1 }\r\n                currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            }\r\n            this.tiles.push(currentTile)\r\n        }\r\n\r\n    }\r\n    createLastTile() {\r\n        let lastTile = this.createTile()\r\n        lastTile.edges[1] = this.tiles[7].edges[5]\r\n        lastTile.edges[2] = this.tiles[7].edges[4]\r\n        lastTile.edges[3] = this.tiles[6].edges[1]\r\n        lastTile.edges[4] = this.tiles[17].edges[2]\r\n        lastTile.edges[5] = this.tiles[17].edges[1]\r\n        lastTile.edges[1].tiles.push(lastTile)\r\n        lastTile.edges[2].tiles.push(lastTile)\r\n        lastTile.edges[3].tiles.push(lastTile)\r\n        lastTile.edges[4].tiles.push(lastTile)\r\n        lastTile.edges[5].tiles.push(lastTile)\r\n\r\n        lastTile.edges[1].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[2].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[3].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[4].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[5].yields.push(this.terrainYields[lastTile.terrainType])\r\n\r\n        this.tiles.push(lastTile)\r\n        this.connectTileNodes(lastTile)\r\n    }\r\n\r\n    connectTileNodes(currentTile) {\r\n        let tileKeysArr = [...Object.keys(currentTile.edges), \"1\"]\r\n        tileKeysArr.reduce((prev, curr) => {\r\n            if (currentTile.edges[curr] === null) {\r\n                currentTile.edges[curr] = new Node(currentTile)\r\n                currentTile.edges[curr].yields.push(this.terrainYields[currentTile.terrainType])\r\n                this.graph.addVertex(currentTile.edges[curr])\r\n            }\r\n            if (prev) {\r\n                this.graph.addEdge(currentTile.edges[curr], currentTile.edges[prev])\r\n            }\r\n            return curr\r\n        }, 0)\r\n    }\r\n\r\n    sharedNode(currentTile, currentTilePointer, referencePointer, referenceTile, increment) {\r\n\r\n        let referenceFirstNode = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        let adjacentNodes = this.graph.adjList.get(referenceFirstNode)\r\n        if (referenceFirstNode.tiles.length === 2) {\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)] = adjacentNodes[2]\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].tiles.push(currentTile)\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].yields.push(this.terrainYields[currentTile.terrainType])\r\n        }\r\n        currentTile.edges[this.numHashGet(currentTilePointer)] = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].tiles.push(currentTile)\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].yields.push(this.terrainYields[currentTile.terrainType])\r\n\r\n    }\r\n\r\n    shuffle(a = this.terrains) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        this.terrains = a\r\n        // let innerLayer = this.numberChits.slice(1, 7)\r\n        // let outerLayer = this.numberChits.slice(7, this.terrains.length)\r\n        let shift = (Math.floor(Math.random() * 6) + 1)\r\n        // console.log(this.numberChits.slice(0, 7), this.numberChits.slice(7), shift)\r\n        let newInner = [...this.numberChits.slice(shift, 7), ...this.numberChits.slice(1, shift)]\r\n        let newOuter = [...this.numberChits.slice(shift + 7, this.numberChits.length), ...this.numberChits.slice(7, shift + 7)]\r\n        // this.numberChits = [this.numberChits[0], ...newInner, ...newOuter]\r\n        // console.log(newInner, newOuter)\r\n\r\n    }\r\n\r\n    connectRoad(targetNode, fromNode, road) {\r\n        console.log(road)\r\n        targetNode.roadsTo[road] = fromNode\r\n        fromNode.roadsTo[road] = targetNode\r\n    }\r\n\r\n    createBoard() {\r\n        this.shuffle()\r\n        this.createCenterTile()\r\n        this.createInnerLayer()\r\n        this.createOuterLayer()\r\n        this.createLastTile()\r\n        for (let node of this.graph.adjList) {\r\n            node[0].tiles = []\r\n        }\r\n    }\r\n}\r\n\r\nclass BuildItem {\r\n    constructor(itemType, color) { // can be roads, settlements, or cities\r\n        this.item = itemType\r\n        this.color = color\r\n    }\r\n    decrement() {\r\n        this.quantity--\r\n    }\r\n    increment() {\r\n        this.quantity++\r\n    }\r\n}\r\n\r\nclass Player {\r\n    constructor(name, color) {\r\n        this.name = name\r\n        this.color = color\r\n        this.roads = Array.from({ length: 15 }, (_) => new BuildItem(\"road\", color))\r\n        this.settlements = Array.from({ length: 5 }, (_) => new BuildItem(\"settlement\", color))\r\n        this.cities = Array.from({ length: 4 }, (_) => new BuildItem(\"city\", color))\r\n        this.cards = {\r\n            \"wood\": 0,\r\n            \"brick\": 0,\r\n            \"hay\": 0,\r\n            \"sheep\": 0,\r\n            \"mineral\": 0\r\n        }\r\n        this.handQuantity = Object.keys(this.cards).reduce((acc, curr) => acc + this.cards[curr], 0)\r\n        this.points = 0\r\n        this.developmentCards = []\r\n    }\r\n    toString() {\r\n        return `Player(name=${this.name}, color=${this.color})`\r\n    }\r\n}\r\n\r\nclass DevelopmentCard {\r\n    constructor(type, useable = true) {\r\n        this.type = type\r\n        this.useable = useable\r\n    }\r\n    use() {\r\n\r\n    }\r\n    effect() {\r\n        switch (this.type) {\r\n            case \"Knight\": {\r\n\r\n            }\r\n            case \"Road Builder\": {\r\n\r\n            }\r\n            case \"Year of Plenty\": {\r\n\r\n            }\r\n            case \"Monopoly\": {\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass DevelopmentDeck {\r\n    constructor() {\r\n        this.deck = this.createDeck()\r\n    }\r\n    createDeck() {\r\n        const knights = \"Knight,\".repeat(14).trim().split(\",\").slice(0, 14).map(card => new DevelopmentCard(card, false))\r\n        const victory = \"Victory Point,\".repeat(5).trim().split(\",\").slice(0, 5).map(card => new DevelopmentCard(card, false))\r\n        const roadBuilder = \"Road Builder,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        const yearOfPlenty = \"Year of Plenty,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        const monopoly = \"Monopoly,\".repeat(2).trim().split(\",\").slice(0, 2).map(card => new DevelopmentCard(card, false))\r\n        let deck = [...knights, ...victory, ...roadBuilder, ...yearOfPlenty, ...monopoly]\r\n        for (let i = deck.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [deck[i], deck[j]] = [deck[j], deck[i]];\r\n        }\r\n        return deck\r\n    }\r\n}\r\n\r\nlet board = new Board()\r\nboard.createBoard()\r\nlet developmentCards = new DevelopmentDeck()\r\ndevelopmentCards.createDeck()\r\nconsole.log(board.graph.adjList)\r\nexport { board, Player, developmentCards }\r\n\r\n\r\n\r\n","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js",["84","85"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js",["86","87"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee, faBuilding, faHome } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Nodes = ({ nodes, nodeHash, nodeAction }) => {\r\n    let validNodes = [...Object.keys(nodes)]\r\n    // const colorHash = {\r\n    //     \"0\": \"white\",\r\n    //     \"1\": \"red\",\r\n    //     \"2\": \"blue\",\r\n    //     \"3\": \"orange\"\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            {validNodes.map((nodeIndex, index) => (\r\n                <div key={index} style={{ ...nodeHash[nodeIndex], color: nodes[nodeIndex].placement ? nodes[nodeIndex].placement.color : \"black\", cursor: \"pointer\" }} onClick={() => nodeAction(nodes[nodeIndex])}>\r\n                    {nodes[nodeIndex].placement ? <FontAwesomeIcon icon={faHome} /> : <p>o</p>}\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Nodes;","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js",["88"],{"ruleId":"89","severity":1,"message":"90","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":24},{"ruleId":"89","severity":1,"message":"93","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":17},{"ruleId":"94","severity":1,"message":"95","line":12,"column":27,"nodeType":"96","messageId":"97","endLine":12,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":123,"column":72,"nodeType":"96","messageId":"97","endLine":123,"endColumn":74},{"ruleId":"89","severity":1,"message":"98","line":164,"column":11,"nodeType":"91","messageId":"92","endLine":164,"endColumn":21},{"ruleId":"89","severity":1,"message":"99","line":302,"column":10,"nodeType":"91","messageId":"92","endLine":302,"endColumn":19},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"89","severity":1,"message":"104","line":242,"column":7,"nodeType":"91","messageId":"92","endLine":242,"endColumn":13},{"ruleId":"105","severity":2,"message":"106","line":246,"column":60,"nodeType":"91","messageId":"107","endLine":246,"endColumn":69},{"ruleId":"105","severity":2,"message":"106","line":247,"column":66,"nodeType":"91","messageId":"107","endLine":247,"endColumn":75},{"ruleId":"105","severity":2,"message":"106","line":248,"column":61,"nodeType":"91","messageId":"107","endLine":248,"endColumn":70},{"ruleId":"89","severity":1,"message":"108","line":238,"column":10,"nodeType":"91","messageId":"92","endLine":238,"endColumn":25},{"ruleId":"109","severity":1,"message":"110","line":123,"column":13,"nodeType":"111","messageId":"97","endLine":123,"endColumn":14},{"ruleId":"109","severity":1,"message":"112","line":124,"column":13,"nodeType":"111","messageId":"97","endLine":124,"endColumn":15},{"ruleId":"109","severity":1,"message":"113","line":125,"column":13,"nodeType":"111","messageId":"97","endLine":125,"endColumn":14},{"ruleId":"109","severity":1,"message":"114","line":126,"column":13,"nodeType":"111","messageId":"97","endLine":126,"endColumn":14},{"ruleId":"109","severity":1,"message":"115","line":127,"column":13,"nodeType":"111","messageId":"97","endLine":127,"endColumn":14},{"ruleId":"109","severity":1,"message":"116","line":128,"column":13,"nodeType":"111","messageId":"97","endLine":128,"endColumn":14},{"ruleId":"109","severity":1,"message":"117","line":129,"column":13,"nodeType":"111","messageId":"97","endLine":129,"endColumn":14},{"ruleId":"109","severity":1,"message":"118","line":130,"column":13,"nodeType":"111","messageId":"97","endLine":130,"endColumn":15},{"ruleId":"89","severity":1,"message":"119","line":272,"column":13,"nodeType":"91","messageId":"92","endLine":272,"endColumn":21},{"ruleId":"89","severity":1,"message":"120","line":273,"column":13,"nodeType":"91","messageId":"92","endLine":273,"endColumn":21},{"ruleId":"121","severity":1,"message":"122","line":342,"column":9,"nodeType":"123","messageId":"124","endLine":355,"endColumn":10},{"ruleId":"125","severity":1,"message":"126","line":346,"column":13,"nodeType":"127","messageId":"128","endLine":348,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":349,"column":13,"nodeType":"127","messageId":"128","endLine":351,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":352,"column":13,"nodeType":"127","messageId":"128","endLine":354,"endColumn":14},{"ruleId":"89","severity":1,"message":"129","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":12},{"ruleId":"130","severity":1,"message":"131","line":45,"column":37,"nodeType":"132","endLine":45,"endColumn":86},{"ruleId":"89","severity":1,"message":"133","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":18},{"ruleId":"89","severity":1,"message":"134","line":3,"column":20,"nodeType":"91","messageId":"92","endLine":3,"endColumn":30},{"ruleId":"130","severity":1,"message":"131","line":82,"column":21,"nodeType":"132","endLine":82,"endColumn":39},"no-unused-vars","'TicTacToeBoard' is defined but never used.","Identifier","unusedVar","'current' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'scoreboard' is assigned a value but never used.","'IsVictory' is defined but never used.","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"'Player' is defined but never used.","no-undef","'BuildItem' is not defined.","undef","'piece_generator' is defined but never used.","no-dupe-keys","Duplicate key '8'.","ObjectExpression","Duplicate key '10'.","Duplicate key '9'.","Duplicate key '4'.","Duplicate key '5'.","Duplicate key '6'.","Duplicate key '3'.","Duplicate key '11'.","'newInner' is assigned a value but never used.","'newOuter' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'Dice' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'faCoffee' is defined but never used.","'faBuilding' is defined but never used.","no-global-assign","no-unsafe-negation"]
[{"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js":"1","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js":"2","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js":"3","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js":"4","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js":"5","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js":"6","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js":"7","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js":"8","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js":"9","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js":"10","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js":"11","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ScoreBoard.js":"12","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\utils\\roadTool.js":"13","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\utils\\roadSearch.js":"14","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DiscardDialog.js":"15","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Lobby.js":"16","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\lobby\\CreateGame.js":"17"},{"size":323,"mtime":1611961753774,"results":"18","hashOfConfig":"19"},{"size":0,"mtime":1608604050967,"results":"20","hashOfConfig":"21"},{"size":745,"mtime":1611960431062,"results":"22","hashOfConfig":"19"},{"size":11652,"mtime":1611962599344,"results":"23","hashOfConfig":"19"},{"size":362,"mtime":1606617756002,"results":"24","hashOfConfig":"19"},{"size":12706,"mtime":1611962398674,"results":"25","hashOfConfig":"19"},{"size":13423,"mtime":1611456899805,"results":"26","hashOfConfig":"19"},{"size":1000,"mtime":1609737223883,"results":"27","hashOfConfig":"19"},{"size":5748,"mtime":1611456899619,"results":"28","hashOfConfig":"19"},{"size":1910,"mtime":1611132032391,"results":"29","hashOfConfig":"19"},{"size":9408,"mtime":1611456899621,"results":"30","hashOfConfig":"19"},{"size":1361,"mtime":1609735171360,"results":"31","hashOfConfig":"19"},{"size":913,"mtime":1610941759211,"results":"32","hashOfConfig":"19"},{"size":1716,"mtime":1611130086340,"results":"33","hashOfConfig":"19"},{"size":3618,"mtime":1611554445442,"results":"34","hashOfConfig":"19"},{"size":362,"mtime":1611556364740,"results":"35","hashOfConfig":"19"},{"size":538,"mtime":1611960091771,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b4srwv",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"odkh2z",{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\App.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\game.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\index.js",["77","78"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Game.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\reportWebVitals.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\GameBoard.js",["79","80","81","82","83"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\gameLogic.js",["84","85","86","87","88","89","90","91","92","93"],"class Node {\r\n    constructor(tile) {\r\n        this.placement = null;\r\n        this.tiles = [tile]\r\n        this.yields = []\r\n        this.canBuild = true\r\n        this.roadsTo = new Map()\r\n    }\r\n    // toString() {\r\n    //     return `[${this.tiles}]`\r\n    // }\r\n}\r\n\r\nclass Graph {\r\n    constructor(noOfVertices) {\r\n        this.noOfVertices = noOfVertices;\r\n        this.adjList = new Map() // adjacency list, keys = vertex, values hold an array of adjacent node\r\n    }\r\n    addVertex(v) {\r\n        this.adjList.set(v, [])\r\n    }\r\n    addEdge(v, w) {\r\n        // grabs the vertex and passes it to the array value\r\n        // then vice versa\r\n        if (this.adjList.get(v).includes(w) && this.adjList.get(w).includes(v)) {\r\n            return\r\n        } else {\r\n            this.adjList.get(v).push(w)\r\n            this.adjList.get(w).push(v)\r\n        }\r\n    }\r\n    printGraph() {\r\n        var getKeys = this.adjList.keys();\r\n\r\n        for (var i of getKeys) {\r\n            var getValues = this.adjList.get(i)\r\n            var conc = \"\"\r\n\r\n            for (var j of getValues) {\r\n                conc += j + \" \"\r\n            }\r\n            console.log(i + \" ->\" + conc)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nclass Tile {\r\n    constructor(terrainType, roll = null, prob = null) {\r\n        this.edges = {\r\n            1: null, // individual nodes\r\n            2: null,\r\n            3: null,\r\n            4: null,\r\n            5: null,\r\n            6: null\r\n        }\r\n        this.prob = prob\r\n        this.terrainType = terrainType\r\n        this.roll = roll\r\n        this.roads = {}\r\n        this.blocked = false\r\n    }\r\n    toString() {\r\n        return ` ${this.roll} of ${this.terrainType}`\r\n    }\r\n}\r\n\r\n\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.tiles = []\r\n        this.centerTile = null;\r\n        this.graph = new Graph(57)\r\n        this.terrains = [\r\n            \"Hills\", \"Mountain\", \"Hills\",\r\n            \"Fields\", \"Forest\", \"Forest\",\r\n            \"Fields\", \"Forest\", \"Pasture\",\r\n            \"Hills\", \"Pasture\", \"Mountain\",\r\n            \"Fields\", \"Fields\", \"Mountain\",\r\n            \"Pasture\", \"Pasture\", \"Desert\",\r\n            \"Forest\"\r\n        ]\r\n        this.numberChits = [\r\n            11, 3, 6,\r\n            5, 4, 9, 10,\r\n            8, 4, 11, 12,\r\n            9, 10, 8, 3,\r\n            6, 2, 5\r\n        ]\r\n        this.rolls = {\r\n            \"2\": [],\r\n            \"3\": [],\r\n            \"4\": [],\r\n            \"5\": [],\r\n            \"6\": [],\r\n            \"8\": [],\r\n            \"9\": [],\r\n            \"10\": [],\r\n            \"11\": [],\r\n            \"12\": []\r\n        }\r\n        this.terrainYields = {\r\n            \"Hills\": \"brick\",\r\n            \"Fields\": \"hay\",\r\n            \"Pasture\": \"sheep\",\r\n            \"Forest\": \"wood\",\r\n            \"Mountain\": \"mineral\",\r\n            \"Desert\": null\r\n        }\r\n        this.probabilityHash = {\r\n            5: 4,\r\n            2: 1,\r\n            6: 5,\r\n            3: 2,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            12: 1,\r\n            11: 2,\r\n            4: 3,\r\n            8: 5,\r\n            10: 3,\r\n            9: 4,\r\n            4: 3,\r\n            5: 4,\r\n            6: 5,\r\n            3: 2,\r\n            11: 2,\r\n            [null]: null\r\n        }\r\n        this.placements = {}\r\n    }\r\n\r\n    numHashGet(num) {\r\n        return this.circularArr(Number(num))\r\n    }\r\n\r\n    circularArr(n) {\r\n        if (0 < n && n < 7) {\r\n            return n\r\n        } else if (n > 6) {\r\n            return n - 6\r\n        } else if (n < 0) {\r\n            return n + 1 + 6\r\n        }\r\n    }\r\n\r\n    createTile() {\r\n        let terrain = this.terrains.shift()\r\n        let roll = terrain === \"Desert\" ? null : this.numberChits.shift()\r\n        let tile = new Tile(terrain, roll, this.probabilityHash[roll])\r\n        if (tile.roll) {\r\n            this.rolls[`${tile.roll}`].push(tile)\r\n        }\r\n        return tile\r\n    }\r\n    shuffleTilesAndNum() {\r\n\r\n    }\r\n\r\n    createCenterTile() {\r\n        let center = this.createTile()\r\n        this.connectTileNodes(center)\r\n        this.tiles.push(center)\r\n        this.centerTile = center\r\n    }\r\n\r\n    createInnerLayer() {\r\n        let centerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        for (let tileCount = 1; tileCount <= 6; tileCount++) {\r\n            let currentTile = this.createTile()\r\n            this.sharedNode(currentTile, currentTilePointer.first, centerPointer.first, this.centerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, centerPointer.second, this.centerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            centerPointer = { first: centerPointer.first + 1, second: centerPointer.second + 1 }\r\n            currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            this.tiles.push(currentTile)\r\n        }\r\n    }\r\n\r\n\r\n    createOuterLayer() {\r\n        let innerPointer = { first: 6, second: 1 }\r\n        let currentTilePointer = { first: 4, second: 3 }\r\n        let tilePointer = 1\r\n        let innerTile = this.tiles[tilePointer]\r\n        for (let tileCount = 0; tileCount < 11; tileCount++) {\r\n            let currentTile = this.createTile()\r\n\r\n            this.sharedNode(currentTile, currentTilePointer.first, innerPointer.first, innerTile, 1)\r\n            this.sharedNode(currentTile, currentTilePointer.second, innerPointer.second, innerTile, -1)\r\n            this.connectTileNodes(currentTile)\r\n\r\n            if (tileCount % 2 === 1) { //switch tile after every other iteration\r\n                tilePointer++\r\n                innerTile = this.tiles[tilePointer]\r\n            } else { // switch pointers in between\r\n                innerPointer = { first: innerPointer.first + 1, second: innerPointer.second + 1 }\r\n                currentTilePointer = { first: currentTilePointer.first + 1, second: currentTilePointer.second + 1 }\r\n            }\r\n            this.tiles.push(currentTile)\r\n        }\r\n\r\n    }\r\n    createLastTile() {\r\n        let lastTile = this.createTile()\r\n        lastTile.edges[1] = this.tiles[7].edges[5]\r\n        lastTile.edges[2] = this.tiles[7].edges[4]\r\n        lastTile.edges[3] = this.tiles[6].edges[1]\r\n        lastTile.edges[4] = this.tiles[17].edges[2]\r\n        lastTile.edges[5] = this.tiles[17].edges[1]\r\n        lastTile.edges[1].tiles.push(lastTile)\r\n        lastTile.edges[2].tiles.push(lastTile)\r\n        lastTile.edges[3].tiles.push(lastTile)\r\n        lastTile.edges[4].tiles.push(lastTile)\r\n        lastTile.edges[5].tiles.push(lastTile)\r\n\r\n        lastTile.edges[1].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[2].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[3].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[4].yields.push(this.terrainYields[lastTile.terrainType])\r\n        lastTile.edges[5].yields.push(this.terrainYields[lastTile.terrainType])\r\n\r\n        this.tiles.push(lastTile)\r\n        this.connectTileNodes(lastTile)\r\n    }\r\n\r\n    connectTileNodes(currentTile) {\r\n        let tileKeysArr = [...Object.keys(currentTile.edges), \"1\"]\r\n        tileKeysArr.reduce((prev, curr) => {\r\n            if (currentTile.edges[curr] === null) {\r\n                currentTile.edges[curr] = new Node(currentTile)\r\n                currentTile.edges[curr].yields.push(this.terrainYields[currentTile.terrainType])\r\n                this.graph.addVertex(currentTile.edges[curr])\r\n            }\r\n            if (prev) {\r\n                this.graph.addEdge(currentTile.edges[curr], currentTile.edges[prev])\r\n            }\r\n            return curr\r\n        }, 0)\r\n    }\r\n\r\n    sharedNode(currentTile, currentTilePointer, referencePointer, referenceTile, increment) {\r\n\r\n        let referenceFirstNode = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        let adjacentNodes = this.graph.adjList.get(referenceFirstNode)\r\n        if (referenceFirstNode.tiles.length === 2) {\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)] = adjacentNodes[2]\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].tiles.push(currentTile)\r\n            currentTile.edges[this.numHashGet(currentTilePointer + increment)].yields.push(this.terrainYields[currentTile.terrainType])\r\n        }\r\n        currentTile.edges[this.numHashGet(currentTilePointer)] = referenceTile.edges[this.numHashGet(referencePointer)]\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].tiles.push(currentTile)\r\n        currentTile.edges[this.numHashGet(currentTilePointer)].yields.push(this.terrainYields[currentTile.terrainType])\r\n\r\n    }\r\n\r\n    shuffle(a = this.terrains) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        this.terrains = a\r\n        // let innerLayer = this.numberChits.slice(1, 7)\r\n        // let outerLayer = this.numberChits.slice(7, this.terrains.length)\r\n        let shift = (Math.floor(Math.random() * 6) + 1)\r\n        // console.log(this.numberChits.slice(0, 7), this.numberChits.slice(7), shift)\r\n        let newInner = [...this.numberChits.slice(shift, 7), ...this.numberChits.slice(1, shift)]\r\n        let newOuter = [...this.numberChits.slice(shift + 7, this.numberChits.length), ...this.numberChits.slice(7, shift + 7)]\r\n        // this.numberChits = [this.numberChits[0], ...newInner, ...newOuter]\r\n        // console.log(newInner, newOuter)\r\n\r\n    }\r\n\r\n    connectRoad(targetNode, fromNode, road) {\r\n        if (!targetNode.roadsTo.get(road)) {\r\n            targetNode.roadsTo.set(fromNode, road)\r\n            fromNode.roadsTo.set(targetNode, road)\r\n        }\r\n    }\r\n\r\n    createBoard() {\r\n        this.shuffle()\r\n        this.createCenterTile()\r\n        this.createInnerLayer()\r\n        this.createOuterLayer()\r\n        this.createLastTile()\r\n        for (let node of this.graph.adjList) {\r\n            node[0].tiles = []\r\n        }\r\n    }\r\n}\r\n\r\nclass BuildItem {\r\n    constructor(itemType, color) { // can be roads, settlements, or cities\r\n        this.item = itemType\r\n        this.color = color\r\n    }\r\n    decrement() {\r\n        this.quantity--\r\n    }\r\n    increment() {\r\n        this.quantity++\r\n    }\r\n}\r\n\r\nclass Player {\r\n    constructor(name, color) {\r\n        this.name = name\r\n        this.color = color\r\n        this.roads = Array.from({ length: 15 }, (_) => new BuildItem(\"road\", color))\r\n        this.settlements = Array.from({ length: 5 }, (_) => new BuildItem(\"settlement\", color))\r\n        this.cities = Array.from({ length: 4 }, (_) => new BuildItem(\"city\", color))\r\n        this.cards = {\r\n            \"wood\": 0,\r\n            \"brick\": 0,\r\n            \"hay\": 0,\r\n            \"sheep\": 0,\r\n            \"mineral\": 0\r\n        }\r\n        this.handQuantity = Object.keys(this.cards).reduce((acc, curr) => acc + this.cards[curr], 0)\r\n        this.points = 0\r\n        this.developmentCards = []\r\n        this.placements = []\r\n    }\r\n    toString() {\r\n        return `Player(name=${this.name}, color=${this.color})`\r\n    }\r\n}\r\n\r\nclass DevelopmentCard {\r\n    constructor(type, useable = true) {\r\n        this.type = type\r\n        this.useable = useable\r\n    }\r\n}\r\n\r\nclass DevelopmentDeck {\r\n    constructor() {\r\n        this.deck = this.createDeck()\r\n    }\r\n    createDeck() {\r\n        const knights = [\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n            new DevelopmentCard(\"Knight\", true),\r\n        ]\r\n        const victory = [\r\n            new DevelopmentCard(\"Victory Point\", true),\r\n            new DevelopmentCard(\"Victory Point\", true),\r\n            new DevelopmentCard(\"Victory Point\", true),\r\n            new DevelopmentCard(\"Victory Point\", true),\r\n            new DevelopmentCard(\"Victory Point\", true),\r\n        ]\r\n        const roadBuilder = [\r\n            new DevelopmentCard(\"Road Builder\", true),\r\n            new DevelopmentCard(\"Road Builder\", true),\r\n        ]\r\n        const yearOfPlenty = [\r\n            new DevelopmentCard(\"Year of Plenty\", true),\r\n            new DevelopmentCard(\"Year of Plenty\", true),\r\n        ]\r\n        const monopoly = [\r\n            new DevelopmentCard(\"Monopoly\", true),\r\n            new DevelopmentCard(\"Monopoly\", true)\r\n        ]\r\n\r\n        let deck = [...knights, ...victory, ...roadBuilder, ...yearOfPlenty, ...monopoly]\r\n        for (let i = deck.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [deck[i], deck[j]] = [deck[j], deck[i]];\r\n        }\r\n        return [new DevelopmentCard(\"Monopoly\", true), ...deck]\r\n    }\r\n}\r\n\r\nlet board = new Board()\r\nboard.createBoard()\r\nlet developmentCards = new DevelopmentDeck()\r\ndevelopmentCards.createDeck()\r\n\r\nexport { board, Player, developmentCards }\r\n\r\n\r\n\r\n\r\n\r\n",["94","95"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Dice.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ActiveTurn.js",["96","97"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\Nodes.js",[],["98","99"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DevelopmentCardDialog.js",["100","101"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\ScoreBoard.js",["102"],"import React, { useState } from \"react\"\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst ScoreBoard = ({ players, currentPlayer }) => {\r\n\r\n    console.log(players)\r\n\r\n    return (\r\n        <table style={{ width: \"80%\" }}>\r\n            <tr>\r\n                <th><Typography variant=\"h5\">Player</Typography></th>\r\n                <th><Typography variant=\"h5\">Resources</Typography></th>\r\n                <th><Typography variant=\"h5\">DC</Typography></th>\r\n                <th><Typography variant=\"h5\">Knights</Typography></th>\r\n                <th><Typography variant=\"h5\">VP</Typography></th>\r\n            </tr>\r\n            {Object.keys(players).map(player => (\r\n                <tr>\r\n                    <td><Typography style={{ background: players[player]  === currentPlayer ? \"mediumseagreen\": \"#212529\" }} variant=\"h6\">{players[player].name}</Typography></td>\r\n                    <td><Typography variant=\"body1\">{players[player].handQuantity}</Typography></td>\r\n                    <td><Typography variant=\"body1\">{players[player].developmentCards.length}</Typography></td>\r\n                    <td><Typography variant=\"body1\">2</Typography></td>\r\n                    <td><Typography variant=\"body1\">{players[player].points}</Typography></td>\r\n                </tr>\r\n            ))}\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard\r\n","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\utils\\roadTool.js",[],["103","104"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\utils\\roadSearch.js",["105"],"import { board } from \"../components/gameLogic\"\r\n\r\n\r\nexport const roadSearch = (player) => {\r\n    const settlements = [...player.placements]\r\n    const availableRoads = []\r\n    const roadQueue = []\r\n    const visited = []\r\n    let currentNode;\r\n    while (settlements.length || roadQueue.length) {\r\n        if (!roadQueue.length) {\r\n            currentNode = settlements.shift()\r\n        } else {\r\n            currentNode = roadQueue.shift()\r\n        }\r\n        let adjNodes = board.graph.adjList.get(currentNode)\r\n        adjNodes.forEach(node => {\r\n            if (visited.includes(node)) {\r\n                // skip\r\n            } else {\r\n                let road = currentNode.roadsTo.get(node)\r\n                // console.log(\"this is node\", node, \"this is player\", player, \"this is road\", road)\r\n                // console.log(\"this is road\", road)\r\n                if (!node.placement && !road) {\r\n                    // if there is no settlement and no road\r\n                    availableRoads.push({to:node, from:currentNode})\r\n                } else if (road && road.color === player.color) {\r\n                    // console.log(\"these are the same color\")\r\n                    roadQueue.push(node)\r\n                    // there is a road that belongs to the user, add the node to the roadQueue\r\n                } else if (node.placement && node.placement.color === player.color) {\r\n                    // the node in question has a settlement\r\n                    // console.log(\"my settlement\")\r\n                    settlements.unshift(node)\r\n                    roadQueue.push(node)\r\n\r\n                }\r\n            }\r\n        })\r\n        visited.push(currentNode)\r\n    }\r\n    return availableRoads\r\n}\r\n","C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\DiscardDialog.js",["106"],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\Lobby.js",[],"C:\\Users\\uzias\\Desktop\\lambda\\Independent Projects\\shapes\\catan\\src\\components\\lobby\\CreateGame.js",["107","108"],{"ruleId":"109","severity":1,"message":"110","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":13},{"ruleId":"109","severity":1,"message":"113","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":49,"column":50,"nodeType":"116","messageId":"117","endLine":56,"endColumn":18},{"ruleId":"118","severity":1,"message":"119","line":49,"column":62,"nodeType":"116","messageId":"120","endLine":49,"endColumn":64},{"ruleId":"121","severity":1,"message":"122","line":91,"column":13,"nodeType":"123","messageId":"124","endLine":95,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":211,"column":5,"nodeType":"127","messageId":"128","endLine":213,"endColumn":6},{"ruleId":"109","severity":1,"message":"129","line":260,"column":10,"nodeType":"111","messageId":"112","endLine":260,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":123,"column":13,"nodeType":"132","messageId":"133","endLine":123,"endColumn":14},{"ruleId":"130","severity":1,"message":"134","line":124,"column":13,"nodeType":"132","messageId":"133","endLine":124,"endColumn":15},{"ruleId":"130","severity":1,"message":"135","line":125,"column":13,"nodeType":"132","messageId":"133","endLine":125,"endColumn":14},{"ruleId":"130","severity":1,"message":"136","line":126,"column":13,"nodeType":"132","messageId":"133","endLine":126,"endColumn":14},{"ruleId":"130","severity":1,"message":"137","line":127,"column":13,"nodeType":"132","messageId":"133","endLine":127,"endColumn":14},{"ruleId":"130","severity":1,"message":"138","line":128,"column":13,"nodeType":"132","messageId":"133","endLine":128,"endColumn":14},{"ruleId":"130","severity":1,"message":"139","line":129,"column":13,"nodeType":"132","messageId":"133","endLine":129,"endColumn":14},{"ruleId":"130","severity":1,"message":"140","line":130,"column":13,"nodeType":"132","messageId":"133","endLine":130,"endColumn":15},{"ruleId":"109","severity":1,"message":"141","line":272,"column":13,"nodeType":"111","messageId":"112","endLine":272,"endColumn":21},{"ruleId":"109","severity":1,"message":"142","line":273,"column":13,"nodeType":"111","messageId":"112","endLine":273,"endColumn":21},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"109","severity":1,"message":"147","line":6,"column":5,"nodeType":"111","messageId":"112","endLine":6,"endColumn":21},{"ruleId":"148","severity":1,"message":"149","line":53,"column":37,"nodeType":"150","endLine":53,"endColumn":107},{"ruleId":"143","replacedBy":"151"},{"ruleId":"145","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":63,"column":82,"nodeType":"155","messageId":"133","endLine":63,"endColumn":84},{"ruleId":"148","severity":1,"message":"149","line":215,"column":48,"nodeType":"150","endLine":215,"endColumn":65},{"ruleId":"109","severity":1,"message":"156","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"143","replacedBy":"157"},{"ruleId":"145","replacedBy":"158"},{"ruleId":"114","severity":1,"message":"159","line":17,"column":26,"nodeType":"116","messageId":"117","endLine":39,"endColumn":10},{"ruleId":"109","severity":1,"message":"160","line":56,"column":11,"nodeType":"111","messageId":"112","endLine":56,"endColumn":26},{"ruleId":"109","severity":1,"message":"156","line":1,"column":17,"nodeType":"111","messageId":"112","endLine":1,"endColumn":25},{"ruleId":"109","severity":1,"message":"161","line":1,"column":27,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},"no-unused-vars","'Lobby' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'newRoadNode'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.reduce() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'piece_generator' is defined but never used.","no-dupe-keys","Duplicate key '8'.","ObjectExpression","unexpected","Duplicate key '10'.","Duplicate key '9'.","Duplicate key '4'.","Duplicate key '5'.","Duplicate key '6'.","Duplicate key '3'.","Duplicate key '11'.","'newInner' is assigned a value but never used.","'newOuter' is assigned a value but never used.","no-native-reassign",["162"],"no-negated-in-lhs",["163"],"'developmentCards' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["162"],["163"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'useState' is defined but never used.",["162"],["163"],"Function declared in a loop contains unsafe references to variable(s) 'currentNode', 'currentNode'.","'handleClickOpen' is assigned a value but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]